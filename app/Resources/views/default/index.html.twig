{% extends 'base.html.twig' %}

{% block body %}
    <div id="wrapper">
        <div id="container">
            <div id="status">
                <p>
                    <div class="question">
                        What access modifiers are available in PHP for:<br />
                        <ul>
                            <li>class</li>
                            <li>class method</li>
                            <li>class property</li>
                            <li>class const</li>
                        </ul>
                        Are they required? What will happen if we do not define them?<br />
                    </div>
                    <hr />
                    <div class="answer">
                        Classes can be defined as <b class="code">abstract</b> or <b class="code">final</b>.<br />
                         - abstract classes are inhibited from being initialized, but can be inherited. Such class combines properties of both interface and standard class - that is it can contain empty method stubs as well as functional methods<br />
                         - final classes are inhibited from being inherited<br />
                        <br />
                        Methods can be also defined as <b class="code">abstract</b>, which makes them similar to method stubs found in interfaces, but also can be<br />
                         - private: such a method cannot be overridden or accessed by inheriting classes<br />
                         - protected: protected method cannot be accessed outside of inheritance hierarchy, but can be overridden (yet, it's access level cannot be changed)<br />
                         - public: public method is visible to the whole of the outside world - it can be accessed by anything implementing it's parent class, and can be overridden in the inheritance chain<br />
                        <br />
                        Properties share the same access modifiers as methods, without the <b class="code">abstract</b> keyword.<br />
                        Consts can be either <b class="code">private</b> or <b class="code">public</b><br />
                        <br />
                        Without access modifiers, consts and methods are public; Properties have to have defined access modifier.
                    </div>
                </p>
                <p>
                    <div class="question">
                        We have an array defined by: $numbers = [1,3,6,7,9,11]; How can we get sum of all
                        array elements? Provide some few algorithms to get that sum.
                    </div>
                    <hr />
                    <div class="answer">
                        <pre class="code">
$numbers = [1,3,6,7,9,11];

$sum = array_reduce($numbers, function($carry, $item){
    return $item + $carry;
});
                        </pre>

                        <pre class="code">
$numbers = [1,3,6,7,9,11];

$sum_two = 0;
    for($i=0;$i&lt;count($numbers);$i++) {
    $sum_two += $numbers[$i];
}
                        </pre>
                        <pre class="code">
$sum_three = 0;

while(current($numbers)) {
    $sum_three += current($numbers);
    next($numbers);
}
                        </pre>
                    </div>
                </p>
                <p>
                    <div class="question">
                        What is the difference between LEFT JOIN and INNER JOIN. What is the difference
                        between MyISAM and InnoDB?
                    </div>
                    <hr />
                    <div class="answer">
                        <b class="code">LEFT JOIN</b> is characterised by padding empty results with NULL's;<br />
                        E.g. :<br />
                        Table users consists of user ids and logins<br />
                        <table>
                            <thead style="background-color: #565656">
                                <tr>
                                    <td>id</td>
                                    <td>login</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>nabuchadnezzar</td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>test</td>

                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>test-2</td>
                                </tr>
                            </tbody>
                        </table>
                        Table user_emails has data about their email addresses correlated to user's ids<br />
                        <table>
                            <thead style="background-color: #565656">
                            <tr>
                                <td>id</td>
                                <td>email</td>
                                <td>user_id</td>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>1</td>
                                <td>nabuchadnezzar@gmail.com</td>
                                <td>1</td>
                            </tr>
                            <tr>
                                <td>2</td>
                                <td>test-2</td>
                                <td>3</td>
                            </tr>
                            </tbody>
                        </table>
                        <br />
                        Left joining users with user_email on user_email.user_id = user.id, we would receive three records, where email field assigned to user test would be NULL.<br />
                        Same join query uning INNER instead of LEFT would result only in two record  - for user id 1 and 3.<br />
                        <br />
                        The main difference between MyISAM and InnoDB engines is that the latter support transactions, when MyISAM do not.<br />
                        However, MyISAM does support fulltext search, for which InnoDB does not allow<br />
                    </div>
                </p>
                <p>
                    <div class="question">
                        “Trait” - what is it? How can we use it?
                    </div>
                    <hr />
                    <div class="answer">
                        Traits are type of PHP objects enabling for a de facto multi-extending. With the help of traits code can inherently retrieve properties and methods contained in the selected trait. <br />
                        Moreover implemented trait has access to the properties and methods of class it is implemented by.<br />
                        To use a trait, besides autoloading the file, class has to declare usage in the following manner:<br />
                        <pre class="code">
class ClassName {
    use TraitName;
                        </pre>
                        <br />
                        The best example of such usage is logger, which doesn't have to be extended, or build. Once declared, implementing class can use it's log method to retrieve logging functionality with all of class tracking parameters (i.e. the magic __CLASS__ param of the callee) being automatically retrieved by the trait
                    </div>
                </p>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
<style>
    body { background: #F5F5F5; font: 18px/1.5 sans-serif; }
    h1, h2 { line-height: 1.2; margin: 0 0 .5em; }
    h1 { font-size: 36px; }
    h2 { font-size: 21px; margin-bottom: 1em; }
    p { margin: 0 0 1em 0; }
    a { color: #0000F0; }
    a:hover { text-decoration: none; }
    code { background: #F5F5F5; max-width: 100px; padding: 2px 6px; word-wrap: break-word; }
    #wrapper { background: #FFF; margin: 1em auto; max-width: 800px; width: 95%; }
    #container { padding: 2em; }
    #welcome, #status { margin-bottom: 2em; }
    #welcome h1 span { display: block; font-size: 75%; }
    #icon-status, #icon-book { float: left; height: 64px; margin-right: 1em; margin-top: -4px; width: 64px; }
    #icon-book { display: none; }

</style>
{% endblock %}
